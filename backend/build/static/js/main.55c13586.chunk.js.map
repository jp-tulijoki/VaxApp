{"version":3,"sources":["components/timepicker.js","components/dailyOrderChart.js","components/vaccineUseStats.js","components/dailyStats.js","App.js","index.js"],"names":["MaterialUIPickers","getStats","useState","selectedDate","setSelectedDate","handleDateChange","time","toTimeString","substring","ISODate","toISOString","dateTime","utils","DateFnsUtils","Grid","container","justifyContent","disableToolbar","variant","format","views","margin","id","label","value","onChange","KeyboardButtonProps","DailyOrderChart","stats","data","i","dailyCount","length","push","name","vaccine","orders","orderCount","injections","injectionCount","BarChart","width","height","top","right","left","bottom","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","Tooltip","Legend","Bar","fill","VaccineUseStats","vaccinesInExpiredBottles","vaccinationsBeforeExpiration","PieChart","Pie","cx","cy","outerRadius","DailyStats","Number","expiredBottlesCount","vaccinesLeftToUse","expiringVaccines","App","setStats","a","axios","post","response","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.55c13586.chunk.js","sourcesContent":["import \"date-fns\";\nimport React, { useState } from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport DateFnsUtils from \"@date-io/date-fns\";\nimport {\n  MuiPickersUtilsProvider,\n  KeyboardTimePicker,\n  KeyboardDatePicker,\n} from \"@material-ui/pickers\";\n\nconst MaterialUIPickers = ({ getStats }) => {\n  const [selectedDate, setSelectedDate] = useState(null);\n\n  const handleDateChange = (selectedDate) => {\n    setSelectedDate(selectedDate);\n    const time = selectedDate.toTimeString().substring(0, 8);\n    const ISODate = selectedDate.toISOString().substring(0, 11);\n    const dateTime = `${ISODate}${time}`;\n    getStats(dateTime);\n  };\n\n  return (\n    <MuiPickersUtilsProvider utils={DateFnsUtils}>\n      <Grid container justifyContent=\"flex-start\">\n        <KeyboardDatePicker\n          disableToolbar\n          variant=\"inline\"\n          format=\"dd/MM/yyyy\"\n          views={[\"year\", \"month\", \"date\"]}\n          margin=\"normal\"\n          id=\"date-picker-inline\"\n          label=\"Select date\"\n          value={selectedDate}\n          onChange={handleDateChange}\n          KeyboardButtonProps={{\n            \"aria-label\": \"change date\",\n          }}\n        />\n        <KeyboardTimePicker\n          margin=\"normal\"\n          id=\"time-picker\"\n          label=\"Select time\"\n          value={selectedDate}\n          onChange={handleDateChange}\n          KeyboardButtonProps={{\n            \"aria-label\": \"change time\",\n          }}\n        />\n      </Grid>\n    </MuiPickersUtilsProvider>\n  );\n};\n\nexport default MaterialUIPickers;\n","import React from \"react\";\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n} from \"recharts\";\n\nconst DailyOrderChart = ({ stats }) => {\n  let data = [];\n\n  for (let i = 0; i < stats.dailyCount.length; i++) {\n    data.push({\n      name: stats.dailyCount[i].vaccine,\n      orders: stats.dailyCount[i].orderCount,\n      injections: stats.dailyCount[i].injectionCount,\n    });\n  }\n\n  return (\n    <div>\n      <h2>Daily order stats by producer</h2>\n      <BarChart\n        width={500}\n        height={300}\n        data={data}\n        margin={{\n          top: 5,\n          right: 30,\n          left: 20,\n          bottom: 5,\n        }}\n      >\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis dataKey=\"name\" />\n        <YAxis />\n        <Tooltip />\n        <Legend />\n        <Bar dataKey=\"orders\" fill=\"#8884d8\" />\n        <Bar dataKey=\"injections\" fill=\"#82ca9d\" />\n      </BarChart>\n    </div>\n  );\n};\n\nexport default DailyOrderChart;\n","import React from \"react\";\nimport { PieChart, Pie, Legend } from \"recharts\";\n\nconst VaccineUseStats = ({ stats }) => {\n  if (stats.vaccinesInExpiredBottles === null) {\n    return <></>;\n  }\n\n  const vaccinationsBeforeExpiration = stats.vaccinationsBeforeExpiration;\n  const spoiledVaccines =\n    stats.vaccinesInExpiredBottles - stats.vaccinationsBeforeExpiration;\n\n  const data = [\n    {\n      name: \"Vaccinations before expiration\",\n      value: vaccinationsBeforeExpiration,\n      fill: \"#0ee327\",\n    },\n    { name: \"Spoiled vaccines\", value: spoiledVaccines, fill: \"#e30e0e\" },\n  ];\n\n  return (\n    <div>\n      <h2>Vaccine use efficiency</h2>\n      <PieChart width={400} height={300}>\n        <Pie\n          dataKey=\"value\"\n          data={data}\n          cx=\"50%\"\n          cy=\"50%\"\n          outerRadius={80}\n          fill={data.fill}\n          label\n        />\n        <Legend />\n      </PieChart>\n    </div>\n  );\n};\n\nexport default VaccineUseStats;\n","import DailyOrderChart from \"./dailyOrderChart\";\nimport VaccineUseStats from \"./vaccineUseStats\";\n\nconst DailyStats = ({ stats }) => {\n  if (stats === null) {\n    return <></>;\n  }\n\n  if (stats === \"unavailable\") {\n    return <div>Unable to fetch stats from the database at the moment.</div>;\n  }\n\n  let orderCount = 0;\n  let injectionCount = 0;\n\n  for (let i = 0; i < stats.dailyCount.length; i++) {\n    orderCount += Number(stats.dailyCount[i].orderCount);\n    injectionCount += Number(stats.dailyCount[i].injectionCount);\n  }\n\n  return (\n    <div>\n      <p>\n        On the selected day arrived <b>{orderCount}</b> orders and{\" \"}\n        <b>{injectionCount}</b> injections.\n      </p>\n      {stats.dailyCount.length > 0 ? <DailyOrderChart stats={stats} /> : <></>}\n      <p>\n        By the given time, <b>{stats.expiredBottlesCount}</b> vaccine bottles\n        have been expired.\n      </p>\n      <VaccineUseStats stats={stats} />\n      <p>\n        At the moment, there are <b>{stats.vaccinesLeftToUse}</b> vaccines\n        available to be used. <b>{stats.expiringVaccines}</b> of them will\n        expire in 10 days.\n      </p>\n    </div>\n  );\n};\n\nexport default DailyStats;\n","import { useState } from \"react\";\nimport MaterialUIPickers from \"./components/timepicker\";\nimport DailyStats from \"./components/dailyStats\";\nimport axios from \"axios\";\n\nconst App = () => {\n  const [stats, setStats] = useState(null);\n\n  const getStats = async (time) => {\n    try {\n      const response = await axios.post(\"/api/vaccines\", {\n        time,\n      });\n      setStats(response.data);\n    } catch (error) {\n      setStats(\"unavailable\");\n    }\n  };\n\n  return (\n    <div>\n      <h1>Welcome to Vax App!</h1>\n      <p>Please select date and time to see statistics.</p>\n      <MaterialUIPickers getStats={getStats} />\n      <DailyStats stats={stats} />\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}